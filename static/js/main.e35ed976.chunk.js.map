{"version":3,"sources":["components/search.tsx","utils/linkParse.ts","components/searchResult.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Search","props","useState","login","setLogin","loginRef","useRef","className","inputRef","placeholder","onKeyDown","e","key","current","value","rightElement","icon","onClick","React","cloneElement","children","linkParse","link","Array","from","matchAll","map","el","direction","pageNumber","RegExp","exec","reduce","acc","page","SearchResult","loading","results","changeResults","changePage","useEffect","axios","get","then","response","data","items","length","error","pagination","headers","catch","size","intent","Intent","PRIMARY","item","src","avatar_url","alt","type","id","first","prev","text","iconSize","disabled","next","last","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e35ed976.chunk.js","sourcesContent":["import React, { FC, useState, useRef } from 'react'\nimport {InputGroup, Button } from \"@blueprintjs/core\";\n\nconst Search: FC = (props) => {\n  const [login, setLogin] = useState<string>()\n  const loginRef = useRef<HTMLInputElement>(null)\n\n  return (\n    <div className=\"search\">\n      <InputGroup\n        inputRef={loginRef}\n        placeholder=\"Login...\"\n        onKeyDown={(e) => {(e.key === 'Enter') && setLogin(loginRef.current?.value)} }\n        rightElement={(\n          <Button\n            icon=\"arrow-right\"\n            onClick={() => {setLogin(loginRef.current?.value)}}\n          />\n        )}\n      />\n      <div className=\"result_container\">\n        {React.cloneElement(props.children as React.ReactElement<any>, { login })}\n      </div>\n    </div>\n  );\n}\n\nexport default Search","type TDirection = \"first\" | \"last\" | \"next\" | \"prev\";\nexport type TPagination = { [k in TDirection]?: { link: string, page: number } }\n\nfunction linkParse (link: string) {\n  if (!link) return\n  return Array.from(link.matchAll(/<.*?([\\s\\S]*?)>.*?rel=\".*?([\\s\\S]*?)\"/mig))\n    .map((el) => {\n      const direction: TDirection = el[2] as TDirection\n      const link: string = el[1]\n      const pageRegexp = new RegExp(/&page=(\\d+)/, 'g')\n      const pageNumber: any = pageRegexp.exec(link)\n      return { link, direction, pageNumber: +pageNumber[1] }\n    })\n    .reduce((acc, el) => {\n      acc[el.direction] = { link: el.link, page: el.pageNumber };\n      return acc;\n    }, {} as TPagination)\n}\n\nexport default linkParse","import React, { FC, useState, useEffect} from 'react'\nimport axios from 'axios'\nimport { Intent, Spinner, ButtonGroup, Button, Icon } from \"@blueprintjs/core\";\nimport linkParse, { TPagination} from '../utils/linkParse'\n\ninterface IProps {\n login?: string\n}\n\ntype TDataItem = { id: number, login: string, avatar_url: string, type: string}\ninterface IResults {\n  data?: { items: Array<TDataItem>}\n  pagination?: TPagination\n  error?: string\n  loading: boolean\n}\n\nconst SearchResult: FC<IProps> = ({login}) => {\n  const [results, changeResults] = useState<IResults>({ loading: false })\n  const [page, changePage] = useState<{ page: number, link?: string }>({ page: 1 })\n  useEffect(() => {\n    if (login) {\n      changeResults({loading: true})\n      axios.get(page.link ?? `https://api.github.com/search/users?q=${login}+in%3Alogin&per_page=9&page=1`)\n      .then(response => {\n        if (!response.data.items) return changeResults({ error: 'Something going wrong', loading: false })\n        if (response.data.items.length === 0) return changeResults({ error: 'No results', loading: false })\n        return changeResults({\n          data: response.data,\n          pagination: linkParse(response.headers.link),\n          loading: false })\n      })\n      .catch(error => changeResults({error, loading: false}))\n    }\n  }, [page.link, login])\n\n  const { loading, data, pagination} = results\n  if (loading) return (<Spinner className=\"spinner\" size={100} intent={Intent.PRIMARY} />)\n  if (data) return (\n    <>\n      <div className=\"cards\">\n        {data.items.map((item: TDataItem) => (\n          <div key={item.id} className=\"card\">\n            <img className=\"avatar\" src={item.avatar_url} alt={item.login} />\n            <span>{item.login}</span>\n            <span>{item.type}</span>\n          </div>\n          )\n        )}\n      </div>\n      {pagination && <ButtonGroup className=\"pagination\">\n        {pagination.first && pagination.prev!.page !== pagination.first.page && <Button\n          onClick={() => changePage({ page: pagination.first!.page, link: pagination.first!.link })}\n          text={<Icon icon=\"double-chevron-left\" iconSize={18} intent={Intent.PRIMARY} />}\n        />}\n        {pagination.prev && <Button\n          onClick={() => changePage({ page: pagination.prev!.page, link: pagination.prev!.link })}\n          text={<Icon icon=\"chevron-left\" iconSize={18} intent={Intent.PRIMARY} />}\n        />}\n        {page.page && <Button disabled>{page.page}</Button>}\n        {pagination.next && <Button\n          onClick={() => changePage({ page: pagination.next!.page, link: pagination.next!.link })}\n          text={<Icon icon=\"chevron-right\" iconSize={18} intent={Intent.PRIMARY} />}\n        />}\n        {pagination.last && pagination.next!.page !== pagination.last.page && <Button\n          onClick={() => changePage({ page: pagination.last!.page, link: pagination.last!.link })}\n          text={<Icon icon=\"double-chevron-right\" iconSize={18} intent={Intent.PRIMARY} />}\n        />}\n      </ButtonGroup>\n      }\n    </>\n  )\n  return <div className=\"error\">{results.error}</div>\n}\n\nexport default SearchResult","import React from 'react';\nimport './App.css';\nimport \"normalize.css/normalize.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nimport Search from './components/search'\nimport SearchResult from './components/searchResult'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search>\n        <SearchResult />\n      </Search>\n    </div>\n  );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}